====> SEQ: 0    ACK: 0
<---- SEQ: 0    ACK: 1024
====> SEQ: 1024 ACK: 2048
<---- SEQ: 2048 ACK: 3072 (enviando 3 pacotes em sequencia)
<---- SEQ: 3072 ACK: 3072
<---- SEQ: 4096 ACK: 3072
====> SEQ: 3072 ACK: 5120

Estrutura de dados:

Ips são do tipo unsigned long.
EXPECTED_SEQ pode ser NULL ou uint32_t.

ip_table = {
	ipA: {
		ipB: EXPECTED_SEQ // o ACK que enviamos anteriormente
		ipC: NULL, // qualquer SEQ é válido nesse caso
	},
	ipD: { ... }
}

Pseudocódigo:

# Caso 1: o processo A envia um pacote P para um processo B

// Guardamos o ACK para comparar com o SEQ que receberemos posteriormente

tcp_handler() {
	...

	A = P.Source
	B = P.Dest
	
	if not exists IpTable[A.Ip] {
		IpTable[A.Ip] = new Map()
	}
		
	IpTable[A.Ip][B.Ip] = P.Ack	

	...
}

# Caso 2: o processo A recebe um pacote P de um processo B

tcp_handler() {
	...
	
	A = P.Dest
	B = P.Source
	
	if exists IpTable[A.Ip][B.Ip] {
		ExpectedSeq = IpTable[A.Ip][B.Ip]
		ReceivedSeq = P.Seq
		
		if ExpectedSeq != ReceivedSeq {
			PacketError(P)
		} else {
			IpTable[A.Ip][B.Ip] = NULL
		}
	}
				
	...
}
